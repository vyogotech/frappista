name: Build and Publish Container Images

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to publish'
        required: false
        default: 'latest'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version tag
        id: vars
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.event.inputs.version }}" != "" && "${{ github.event.inputs.version }}" != "latest" ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=latest
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          podman --version

      - name: Install QEMU for multi-arch support
        run: |
          sudo apt-get install -y qemu-user-static

      - name: Set up Podman for multi-arch builds
        run: |
          echo '[engine]
          enable_inheritable = true' | sudo tee -a /etc/containers/containers.conf
          sudo systemctl restart podman
          podman info

      - name: Login to Docker Hub
        run: |
          podman login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

      # For Pull Requests, only build but don't push
      - name: Build only (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          make build-amd64
          make build-arm64

      # For pushes and manual triggers, build and push
      - name: Build and push images
        if: github.event_name != 'pull_request'
        run: |
          # Build and push the base multi-arch image
          make push-manifest VERSION=${{ env.VERSION }}
          
          # Build and push the ERPNext multi-arch image
          make erpnext-manifest VERSION=${{ env.VERSION }}